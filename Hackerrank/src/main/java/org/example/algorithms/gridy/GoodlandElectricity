package org.example.algorithms.greedy;

import java.util.Arrays;
import java.util.List;

public class GoodlandElectricity {
    public static void main(String[] args) {
        System.out.println(pylons(4, Arrays.asList(1, 2, 1, 4, 5)));
    }

    public static int pylons(int k, List<Integer> arr) {
        int[] a = arr.stream().mapToInt(Integer::intValue).toArray();
        int counter = 0;
        int index = 0;
        int notCovered = 1;
        int lastAvailable = -1;
        while (index < a.length) {
            if (a[index] == 1) {
                lastAvailable = index;
            }

            if (notCovered >= k) {
                if (lastAvailable == -1) {
                    return -1;
                }
                notCovered = -(k - 1) + (index - lastAvailable) + 1;
                index++;
                counter++;
                lastAvailable = -1;
            } else if (index == a.length - 1) {
                if (notCovered > 0) {
                    if (lastAvailable != 0) {
                        counter++;
                    } else {
                        return -1;
                    }
                }
                index++;
            } else {
                notCovered++;
                index++;
            }
        }
        return counter;
    }
}
